-- Alura
-- Git e Github: Controle e compartilhe seu código
Vinicius Dias

[01. O que é Git?]

	[01 - Introdução]

-----------------------------------------------------
	
	[02 - Para que serve Git?]

	Sistemas de Controle de Versão

	• CVS
	• SVN
	• Mercurial
	• GIT

-----------------------------------------------------
	
	[03 - Utilidade de um VCS]

	• VCS (Version Control System)

	O Git permite que a gente armazene as modificações feitas em cada arquivo em um servidor próprio para isso. Toda a gestão de alterações é feita pelo Git e nós só precisamos nos preocupar em criar código que funciona, e não em quem alterou o que antes.

	Cada alteração que você faz fica gravada em um histórico, podendo ser visualizada e restaurada a qualquer instante.

-----------------------------------------------------
	
	[04 - Instalando o Git]

	https://git-scm.com

	$ dir -> Mostrar o que tem no diretório
	$ ls  -> Mostrar o que tem no diretório
	
	$ git --version -> Mostra a versão do Git

-----------------------------------------------------
	
	[05 - Para saber mais: Instalação]

	No Linux: https://git-scm.com/download/linux
	No macOS: https://git-scm.com/download/mac

-----------------------------------------------------
	
	[06 - Repositórios]

	$ git init   -> Iniciar um repositório no diretório atual
	$ git status -> Branch, Commits, Untracked files...

-----------------------------------------------------
	
	[07 - Para saber mais: Quem é você]

	Alterando o nome e email somente no repositório que está trabalhando:
	$ git config --local user.name "Seu nome"
	$ git config --local user.email "seu@email.com"

-----------------------------------------------------
	
	[08 - Primeiros passos]

	O git init inicializa um repositório no diretório em que o comando for executado. A partir deste comando, o Git poderá gerenciar as modificações realizadas nos arquivos.

-----------------------------------------------------
	
	[09 - Consolidando o seu conhecimento]

-----------------------------------------------------
	
	[10 - O que aprendemos?]

	• O que são (e para que servem) sistemas de controle de versões e como eles podem ajudar o nosso fluxo de desenvolvimento
	• O que é o Git e como instalá-lo
	• Que com o comando git init nós conseguimos criar um repositório Git;
	• Como analisar o estado do nosso repositório através do comando git status.

-----------------------------------------------------

[02. Iniciando os trabalhos]

	[01 - Salvando alterações]

	$ git add "nome do arquivo"         -> Adiciona o arquivo
	$ git add .                         -> Adiciona todos os arquivos do diretório atual
	$ git rm --cached "nome do arquivo" -> Para reverter a ação

	$ git commit -m "mensagem" -> Commit
	• Elaborar mensagens descritivas e não muito grandes!
		Exemplo: "Criando arquivo index.html com lista de cursos"

-----------------------------------------------------
	
	[02 - Para saber mais: git status]

	• HEAD: Estado atual do nosso código, ou seja, onde o Git os colocou
	• Working tree: Local onde os arquivos realmente estão sendo armazenados e editados
	• index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.

	https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Gravando-Alterações-em-Seu-Repositório

-----------------------------------------------------
	
	[03 - Vendo o histórico]

	$ git log
		hash do commit / ramo do commit
		Author
		Data
		Comentário do Commit
	
	$ git config --local  -> Configurações para esse repositório
	$ git config --global -> Configurações para todo o computador

	$ git config --local user.name "nome"
	$ git config --local user.mail "email"

	$ git log --oneline -> Git log resumido
	$ git log -p        -> Git log + alterações realizadas

	• Personalização de Gitlog
	https://devhints.io/git-log

-----------------------------------------------------
	
	[04 - Primeira configuração do Git]

	$ git config --local user.name "Nome da pessoa"

	Assim todos os commits executados neste repositório serão atribuídos à pessoa com nome Nome da pessoa. Para mais detalhes e outras configurações possíveis (até algumas mais avançadas), você pode conferir este link: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration.

-----------------------------------------------------
	
	[05 - Para saber mais: git log]

	$ git log --help

-----------------------------------------------------
	
	[06 - Ignorando arquivos]

	arquivo .gitignore
		Dentro do arquivo:
			ide-config
	
	• Nunca commite código que não funciona!!!
	• A cada alteração significativa deve gerar um commit
		• A cada bug for corrigido
		• A cada feature implementada

-----------------------------------------------------
	
	[07 - Para saber mais: Quando commitar]

-----------------------------------------------------
	
	[08 - Consolidando o seu conhecimento]

-----------------------------------------------------
	
	[09 - O que aprendemos?]

	• Que um commit é a forma de salvar um estado ou versão do nosso código
	• Como adicionar arquivos para serem commitados com git add
	• Como commitar arquivos, utilizando o comando git commit
	• Como verificar o histórico de commits, através do git log e algumas de suas opções:
		git log --oneline
		git log -p
		git log --pretty="parametros de formatação"
	• Como fazer o Git não monitorar arquivos, através do .gitignore
	• Que não devemos realizar commit, ou seja, salvar um estado, da nossa aplicação que não esteja funcionando

-----------------------------------------------------

[03. Compartilhando o trabalho]
	
	[01 - Repositórios remotos]

	$ mkdir "nome do diretorio"
	$ cd "nome do diretorio"
	$ git init --bare -> Só serve para armazenar informações, indica que esse repositório é puro, é um repositório que só contém as alterações dos arquivos, não contem uma cópia de cada um dos arquivos físicos.
	
	$ git status
	$ git remote                       -> Lista todos os repositórios remotos que o repositório local conhece
	$ git remote add local "diretorio" -> Criando uma referência de repositório remoto dentro do próprio computador
	$ git remote -v                    -> nome e endereços de repositórios remotos

	fetch -> De onde vem
	push  -> Para onde vai

	$ git clone "diretorio" "nome do projeto que você desejar" -> clona o repositório desse endereço, com o nome que você desejar

-----------------------------------------------------
	
	[02 - Servidor Git]

	$ git init --bare

	Com este comando nós criamos um repositório que não terá a working tree, ou seja, não conterá uma cópia dos nossos arquivos. Como o repositório servirá apenas como servidor, para que outros membros da equipe sincronizem seus trabalhos, poupamos espaço de armazenamento desta forma.

-----------------------------------------------------
	
	[03 - Trabalhando com repositórios remotos]

	$ git remote add nome-repositorio caminho/para/o/repositorio

	Desta forma teremos um link do nosso repositório local com o repositório remoto, que chamamos de nome-repositorio, que está armazenado em caminho/para/o/repositorio.

-----------------------------------------------------
	
	[04 - Sincronizando os dados]

	$ git push local master -> Empurrar a branch master para o repositório remoto "local"
	$ git pull              -> Puxa os dados do repositório remoto

	$ git remote rename origin local -> Renomeia o repositório remoto de "origin" para "local"
	$ git remote                     -> Lista todos os repositórios remotos atrelados a esse repositório local
	$ git pull local master          -> Puxa a o repositório remoto "local" para a branch master local
	$ git log -p                     -> Exibe as modificações detalhadas linha a linha de alteração

-----------------------------------------------------
	
	[05 - Compartilhamos as alterações]

	$ git push [repositorio] master

	Desta forma, nós enviamos as alterações em nosso branch master para o repositório remoto. Basta substituir [repositorio] pelo nome que demos ao repositório ao adicioná-lo. Já para trazer os dados que estiverem no repositório remoto, podemos utilizar o git pull [repositorio] master.

-----------------------------------------------------
	
	[06 - Github]

	$ git remote add origin "link do repositório remoto"
	$ git push -u origin master -> -u quer dizer "sempre que você der git push e tiver na branch master você deve enviar para a origin!"
	$ git push origin master    -> Empurrando dados da branch master para o repositório remoto origin

-----------------------------------------------------
	
	[07 - Para saber mais: Github]

-----------------------------------------------------
	
	[08 - Consolidando o seu conhecimento]

	$ git init --bare

	OBS: Não se esqueça do parâmetro --bare. Caso tenha executado o comando init sem esse parâmetro, execute na sequência o seguinte comando: git config core.bare true.

	• 'git remote rename origin local' serve para renomear o repositório remoto de "origin" para "local".

-----------------------------------------------------
	
	[09 - O que aprendemos?]

	• O que são repositórios remotos;
	• Como criar um repositório Git sem uma cópia dos arquivos (com --bare) para ser utilizado como servidor;
	• Como adicionar links para os repositórios remotos, com o comando git remote add;
	• Como baixar um repositório pela primeira vez, clonando-o com o comando git clone;
	• Como enviar as nossas alterações para um repositório remoto, com git push;
	• Como atualizar o nosso repositório com os dados no repositório remoto, utilizando git pull;
	• O que é e para que serve o GitHub;
	• Como criar um repositório no GitHub;
	• Como adicionar um repositório do GitHub como repositório remoto.

-----------------------------------------------------

[04. Trabalhando em equipe]
	
	[01 - Branches]

	$ git branch                 -> Lista branches
	$ git branch "nome_branch"   -> Cria uma nova branch
	$ git checkout "nome_branch" -> Muda sua branch de atuação

	https://git-school.github.io/visualizing-git/

	$ git checkout -b "nome_branch" -> Cria e entra na branch

-----------------------------------------------------
	
	[02 - Para saber mais: Ramificações]

-----------------------------------------------------
	
	[03 - Unindo o trabalho]

	$ git merge "nome da branch" -> Fazer fusão de duas branches (A que está em utilização e a que você aponta)
	
	:x, ENTER -> No VIM

-----------------------------------------------------
	
	[04 - Merge de branches]

	$ git checkout master 
	$ git merge titulo

	Desta forma colocaremos o HEAD na branch master, ou seja, faremos com que o nosso código esteja no estado que o deixamos com o último commit na master. Depois, uniremos o trabalho da branch titulo com a branch atual (master).

-----------------------------------------------------
	
	[05 - Atualizando a branch]

	$ git rebase "nome da branch" -> Fazer com que o ultimo commit da branch atual fique na frente do ultimo commmit da branch a ser apontada.
	
	$ git log --graph -> Log em gráfico

-----------------------------------------------------
	
	[06 - Rebase vs Merge]

	O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual.

	Com isso, evitamos os commits de merge. Há uma longa discussão sobre o que é "melhor": rebase ou merge. Estude, pesquise, e tire suas próprias conclusões. Aqui tem um artigo (de milhares outros) que cita o assunto: https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c.

-----------------------------------------------------
	
	[07 - Resolvendo conflitos]

	$ git merge "nome da branch"
	$ git status

	Corrigir conflito
	both modified: index.html

	git add index.html
	git commit

	$ git push local master

-----------------------------------------------------
	
	[08 - Para saber mais: Conflitos com rebase]

-----------------------------------------------------
	
	[09 - Consolidando o seu conhecimento]

-----------------------------------------------------
	
	[10 - O que aprendemos?]

	• Que uma branch (ou ramo) é uma linha de commits separada, e que pode ser utilizada para desenvolver funcionalidades independentes;
	• Que com branches separados, podemos evitar que o código de uma funcionalidade interfira em outra;
	• Como trazer o trabalho realizado em uma branch para outra branch, como por exemplo, o master, através do comando git merge;
	• Que o git merge gera um novo commit, informando que houve uma mescla entre duas branches;
	• Como trazer os commits de uma branch para outra, com o git rebase
	• Que o git rebase não gera um commit de merge, simplificando o nosso log;
	• Como os conflitos são apresentados pelo Git;
	• Como resolver os conflitos e manter apenas as alterações desejadas com o Git.

-----------------------------------------------------

[05. Manipulando as versões]
	
	[01 - Ctrl + Z no Git]

	$ git status
	$ git checkout -- <file> -> Descarta as mudanças feitas no repositório (Precisa estar em Unstage)

	$ git add
	$ git reset HEAD <file> -> Deixa o diretório em Unstage

	$ git commit -m "Mensagem de commit"
	$ git log
	$ git revert <hash do commit> -> Cria um novo commit desfazendo as alterações que esse commit fez

-----------------------------------------------------
	
	[02 - Desfazendo o trabalho]

	(1) desfaz alterações antes de adicioná-las
	(2) depois de adicionar, mas antes de commitar
	(3) após realizar o commit 

	1 - git checkout
	2 - git reset
	3 - git revert

	Alternativa correta! Com o git checkout nós desfazemos uma alteração que ainda não foi adicionada ao index ou stage, ou seja, antes do git add. Depois de adicionar com git add, para desfazer uma alteração, precisamos tirá-la deste estado, com git reset. Agora, se já realizamos o commit, o comando git revert pode nos salvar.