-- Alura
-- React Native: Utilizando e criando Hooks
Natalia Kelim Thiel

[01. Projeto]

	[01 - Apresentação]

	• Como fazer aplicações dinâmicas?
	• Como construir aplicações sem Expo?
	• Saber criar componentes

	Home do orgs
	• Lista de produtores
	• Expandir produtor
	• Mudar classificação com estado
	• Usando hooks
		○ Estado, efeito e até customizado

-----------------------------------------------------
	
	[02 - Preparando o ambiente]

-----------------------------------------------------
	
	[03 - React Native CLI]

	https://reactnative.dev/docs/environment-setup

	$ java -version
	$ node --version
	$ npm -v

	IOS
	$ pod --version
	Instalar o XCode

	CLI = Command Line Interface

-----------------------------------------------------
	
	[04 - Criar o projeto e emulador]

	$ npx react-native init orgsHooks --version 0.65.1

-----------------------------------------------------
	
	[05 - Rodando o projeto]

	$ npx react-native start
	$ npx react-native run-ios (MacOS)
	$ npx react-native run-android

-----------------------------------------------------
	
	[06 - Pré-requisitos]

	Precisamos instalar o Node, o JDK, o Android Studio, as SDKs, o Xcode (para iOS). Também, é necessário criar o projeto e o emulador.

	Para que possamos rodar o projeto em nossa máquina, precisamos seguir os passos da documentação, instalar e criar cada um dos componentes acima. Vale lembrar que MacOS e Windows têm algumas diferenças.

-----------------------------------------------------
	
	[07 - Para saber mais: Expo vs RN]

	https://www.alura.com.br/artigos/como-fazer-a-migracao-do-expo-para-react-native-cli

-----------------------------------------------------
	
	[08 - Faça como eu fiz]

-----------------------------------------------------
	
	[09 - O que aprendemos?]

	• O que é React Native CLI
	• Como configurar o ambiente
	• Como criar um Emulador ideal
	• Como rodar um Projeto

-----------------------------------------------------

[02. Estados e ciclo de vida]

	[01 - Projeto da aula anterior]

	https://github.com/alura-cursos/react-native-utilizando-e-criando-hooks/tree/Aula1

	Lembre-se: caso baixe um projeto do zero, rode os comandos npm install para baixar as dependências do node e, caso for rodar para iOS, cd ios && pod install para baixar as dependências nativas de iOS.

-----------------------------------------------------
	
	[02 - Preparando o ambiente: Imagens do projeto]

	https://github.com/alura-cursos/react-native-utilizando-e-criando-hooks/blob/main/Home.png

-----------------------------------------------------
	
	[03 - Componente do topo]

	• Criar a pasta src

-----------------------------------------------------
	
	[04 - Preparando o ambiente: Arquivo de Mock]

-----------------------------------------------------
	
	[05 - Criando Mocks e serviços]

-----------------------------------------------------
	
	[06 - Estilos]

	Uma vez que temos um componente criado, podemos chamar o parâmetro style e, dentro dele, chamar a constante ‘estilos’, que possui vários modos diferentes, como, por exemplo, o ‘imagem’ e o ‘boasVindas’.

-----------------------------------------------------
	
	[07 - Consumindo o serviço]

-----------------------------------------------------
	
	[08 - Salvando no Estado]

-----------------------------------------------------
	
	[09 - Estados]

	Devemos criar uma função que define do estado setState() e usar a função componentDidMount() e, por fim, aplicar na View através de uma função render().

-----------------------------------------------------
	
	[10 - Para saber mais: Métodos de ciclo de vida]

	• componentDidMount: é executado quando o componente termina de renderizar
	
	• componentDidUpdate: que é executado quando o componente recebe alguma atualização e não é executado na primeira vez que o componente carrega
	
	• componentWillUnmount: que é executado quando o componente é removido da tela
	
	• componentDidCatch: que é chamado quando a aplicação encontra algum erro durante a renderização, em algum método do ciclo de vida ou no construtor de componentes filhos

	React.Componente: https://pt-br.reactjs.org/docs/react-component.html

-----------------------------------------------------
	
	[11 - Faça como eu fiz]

-----------------------------------------------------
	
	[12 - O que aprendemos?]

	• Produzir um Componente
	• Criar um Mock
	• Salvar um Estado

-----------------------------------------------------

[03. Hooks]

	[01 - Projeto da aula anterior]

	https://github.com/alura-cursos/react-native-utilizando-e-criando-hooks/tree/Aula2

	Lembre-se: caso baixe um projeto do zero, rode os comandos npm install para baixar as dependências do node e, caso for rodar para iOS, cd ios && pod install para baixar as dependências nativas de iOS.

-----------------------------------------------------
	
	[2 - Lista de produtores]

	https://pt-br.reactjs.org/docs/hooks-intro.html

-----------------------------------------------------
	
	[3 - Armazenando produtores]

-----------------------------------------------------
	
	[4 - useEffect vs ComponentDidMount]

	É muito mais vantajosa, para o desenvolvedor e para o compilador, a utilização de Hooks para chamar funções do que criar classes inteiras apenas para chamar uma simples função. Isso facilita a reutilização da lógica com estado entre vários componentes.

-----------------------------------------------------
	
	[5 - Estilizar a lista #1]

	acessbilityLabel -> Como o robo irá ler a imagem para o deficiente visual.

-----------------------------------------------------
	
	[6 - Estilizar a lista #2]

	CSS
		elevation -> Atributo apenas para Android para fazer sombra
		• Para se fazer no iOS tem um exemplo no código do componente Produtor.js

-----------------------------------------------------
	
	[7 - Componente de estrelas #1]

-----------------------------------------------------
	
	[8 - Componente de estrelas #2]

-----------------------------------------------------
	
	[9 - Refatorando as estrelas]

-----------------------------------------------------
	
	[10 - Para saber mais: Alternativas para o iOS]

	Nesta aula, prestamos atenção aos estilos tanto para Android quanto para iOS. No entanto, é muito comum que não tenhamos o hardware específico da Apple para que possamos testar no iOS.

	Pensando nisso, será que existem alternativas mais baratas para que possamos validar nossa aplicação para iOS também?

	Sim! Não são opções gratuitas, porém, hoje em dia é possível alugar máquinas e acessá-las via internet, como os serviços:

	MacinCloud;
	Virtual MacOSX.
	Também é possível, porém não recomendado e com alta incidência de incompatibilidades de hardware, criar máquinas virtuais dentro de outros sistemas operacionais, instalando o MacOS.

	Caso você queira usar alguma dessas alternativas, ainda sim precisa seguir os passos do artigo de configuração para preparar o ambiente de iOS na sessão "Aplicações com React Native iOS".

-----------------------------------------------------
	
	[11 - Faça como eu fiz]

-----------------------------------------------------
	
	[12 - O que aprendemos?]

	• Modificar a lista de produtores do app Orgs
	• User o State do Hook
	• Criar uma lista de produtores
	• Estilizar a lista de produtores
	• Adicionar as estrelas para classificar produtores no App
	• Refatorar as estrelas

-----------------------------------------------------

[04. Avançando com Hooks]

	[01 - Projeto da aula anterior]

	https://github.com/alura-cursos/react-native-utilizando-e-criando-hooks/tree/Aula3

	Lembre-se: se você baixar um projeto do zero, rode os comandos npm install para baixar as dependências do node. Se for rodar para iOS, digite cd ios && pod install para baixar as dependências nativas de iOS, beleza? Depois de fazer isso, você pode prosseguir no curso!

-----------------------------------------------------
	
	[02 - Criando um Hook]

-----------------------------------------------------
	
	[03 - Hook de redução]

	https://reactjs.org/docs/hooks-reference.html

-----------------------------------------------------
	
	[04 - Hooks existentes]

	Usando o useReducer, podemos simplificar a alteração do estado do componente quando clicamos nele, e tem mais: podemos reutilizar o código com muito mais facilidade agora!