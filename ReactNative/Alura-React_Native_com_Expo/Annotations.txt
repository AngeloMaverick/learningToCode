-- Alura
-- React Native com Expo: Navegação com menu e suporte às telas
Natalia Kelim Thiel

[01. Iniciando o projeto]

    [01 - Apresentação]

    • Projeto com Expo do Zero
    • Expo <> React Native
    • App Gatito Pet Shop
    • Telas
        1. Serviços
        2. Carrinho
    • Navegação
    • Preparar Telas
        1. Notched
        2. Barra inferior iPhone
        3. Status Bar
    
    O que NÃO vamos aprender?
        • Estilizar componentes
        • React básico (estados e ciclo de vida)
        • APIs e Banco de Dados

-----------------------------------------------------

    [02 - Configurando o ambiente]

    • Dowload do LTS do Node.js
        https://nodejs.org/en/download/
    
    • Verificação de existência e versão via CLI
        $ node --version
        $ npm --version

    • Instalação Expo CLI
        $ npm install -g expo-cli
    
    • Baixar os assets do app
        https://github.com/alura-cursos/alura-gatito-static/tree/Aula1/assets

-----------------------------------------------------

    [03 - Expo vs CLI]

    • Coisas que o Expo não consegue fazer
        Utilizar Bluetooth
        Utilizar WebRTC
        In-App Purchases
        Apple and Google Pay Integration
        Rodar audios em background
        Enviar notificações em background
        entre outras limitações...
    
    • Criando o app Expo
        $ expo init gatito
        Selecionar a opção blank
        $ cd gatito
        $ npm start
        Opening emulator
            $ a 
        Opening App on emulator 
            $ a 

-----------------------------------------------------

    [04 - Criação do projeto]

    Nessa aula iremos aprender:
        • Pastas e arquivos que o Expo gera
        • Alterar o nome da Aplicação
        • Alterar a Splash Screen
        • Alterar o ícone
    
    • Abrir o projeto no VSCode

    node_modules --> Pasta onde contém todos pacotes da aplicação
    package.json --> Arquivo onde contém as versões dos pacotes
    live reload  --> Atualização automática
    
    app.json      --> Arquivo que só o Expo tem, não existe na versão react-native original
        "name":   --> Nome do aplicativo
        "icon":   --> Endereço da imagem do icone do aplicativo
        "splash": --> Endereço da imagem da Splash Screen do aplicativo + detalhes
    
    • Colocar as imagens baixadas no assets
    • Apagar sessão "android" e "web" do app.json

-----------------------------------------------------

    [05 - Alterando nome, ícone e splash screen da aplicação]

    O Expo dispõe o arquivo app.json para que possamos configurar o nome, splash e ícone de maneira mais simples.

    Alterarando o name, o slug e o backgroundColor da splash dentro de app.json e substituindo as imagens icon.png e splash.png dentro de assets. Reiniciar a aplicação para ver as alterações.

-----------------------------------------------------

    [06 - Alterando a frase inicial]

    Alterando o App.js, modificamos o nosso único componente da aplicação até agora e não precisamos fechar e abrir a aplicação pois o live reload do react native atualiza automaticamente as alterações feitas em componentes JavaScript.

-----------------------------------------------------

    [07 - Faça como eu fiz: Criação do projeto]

-----------------------------------------------------

    [08 - O que aprendemos?]

    • As diferenças entre um projeto react native utilizando o Expo CLI e outro utilizando o React Native CLI
    • A criar um projeto e entendemos a estrutura básica dos arquivos gerados, para alterar o componente inicial e vermos as alterações em tempo real
    • A alterar o nome da aplicação, configurando uma splash screen e mudando o ícone do aplicativo  

-----------------------------------------------------

[2. Primeira tela]

	[01 - Projeto da aula anterior]

-----------------------------------------------------

	[02 - Tela de serviços]

    export default --> Quando utilizado, somente uma coisa é exportada do arquivo
    export         --> Quando utilizado, uma ou mais coisas é exportada do arquivo
    <SafeAreaView> --> Tag para não dar conflito com o header e o footer do iPhone
    <StatusBar>    --> Tag para não dar conflito com a barra de notificações do Android

-----------------------------------------------------

	[03 - Listagem de serviços]

-----------------------------------------------------

	[04 - Estilos]

-----------------------------------------------------

	[05 - Correção do Teclado]

    Se ao clicar na quantidade do último item o teclado aparecer e sumir, deve-se utilizar a propriedade removeClippedSubviews={false} na FlatList para que isso não ocorra.

-----------------------------------------------------

	[06 - Add carrinho]

-----------------------------------------------------

    [07 - Moeda, Total e expandir]

    Biblioteca de monetários
    $ npm install intl

    Intl.NumberFormat('pt-BR', {
        style: 'currency', currency: 'BRL'
    }).format(preco) 
    --> formata a informação de exemplo 56.550008 para R$56,55

-----------------------------------------------------

    [08 - Criando um componente]

    Utilizamos o componente em forma de função ou classe para prevenir problemas de ciclo de aplicação. Precisamos retornar sempre uma única tag principal, que nesse caso é um fragmento, uma tag que apenas agrupa as coisas dentro sem causar nenhum efeito estrutural no componente. Além disso, também precisamos sempre utilizar a tag Text para exibir o texto.

-----------------------------------------------------

    [09 - Faça como eu fiz: Tela de serviços]

-----------------------------------------------------

    [10 - Para saber mais: Class X Function Component]

    O componente em formato de classe era a forma mais comum de criar componentes do React até pouco tempo e ainda funciona. Basicamente consiste em criar uma classe que estende um Component, e dentro dela implementamos métodos para os ciclos de vida do React e para renderizar os componentes na tela.

    import React from 'react'
    import { Text } from 'react-native'
    export default class MeuComponente extends React.Component {
    constructor(props) {
            super(props)
            this.state = { texto: 'Alura' }
        }
    componentDidMount() {
        console.log('componente carregado');
    }
    render() {
        return <Text>{this.state.texto}</Text>
    }
    }

    A forma de função era menos utilizada pois as funcionalidades de ciclo e estado não podiam ser utilizadas, então era apenas para criar componentes simples que não precisavam delas. Mas com o nascimento dos hooks é possível realizar essas tarefas agora com function components também, mas com uma sintaxe bem diferente. O exemplo anterior utilizando function component ficaria como import de react, dos componentes, exportar uma função e retornar o que quiser que seja renderizado. Para os states usamos o hook useState, e para as funções de ciclo usamos o useEffect.

    import React, {useState, useEffect} from 'react'
    import { Text } from 'react-native'
    export default function MeuComponente (props) {
    const [texto, atualizaTexto] = useState('Alura');
    useEffect(() => {
        console.log('componente carregado');  
    }, []);
    return  <Text>{texto}</Text>
    }

    Podemos ver que em formato de função temos as mesmas funcionalidades com uma escrita mais simplificada. Então quando utilizar uma forma ou outra? Basicamente as duas têm a mesma equivalência no fim das contas e, como para poder utilizar a estrutura de hooks precisamos de function components, provavelmente você vai chegar a conclusão de que usar function components é a melhor opção no momento.

-----------------------------------------------------

    [11 - O que aprendemos?]

    • Como criar um componente e utilizá-lo em outro componente
    • Utilizar SaveAreaView e StatusBar para que nossas telas não sejam sobrepostas aos elementos do dispositivo como a barra de status e barra inferior de gestos do iPhone
    • Formatar moedas com intl

-----------------------------------------------------

[3. Carrinho]

	[01 - Projeto da aula anterior]

-----------------------------------------------------