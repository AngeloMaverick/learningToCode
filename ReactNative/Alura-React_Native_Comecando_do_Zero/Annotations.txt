-- Alura
-- React Native: Começando do Zero
Natalia Kelim Thiel

[01. Criando o projeto]

	[01 - Apresentação]

	Está começando ou busca simplicidade?
	• Saiba antes apenas o básico de JavaScript
	• Instale somente Node.js e um editor simples
	• Rode no seu celular Android ou iOS

	Conceitos Básicos de React Native
	• Componentes do React Native:
		○ Textos, imagens e botões
	• Criar componentes e estilizar
	• Listas otimizadas
	• Utilizar Google Fontes

-----------------------------------------------------
	
	[02 - React Native e Expo]

	reactnative.dev/docs/environment-setup

	• Expo CLI Quickstart

	npm install -g expo-cli

-----------------------------------------------------
	
	[03 - Preparando o ambiente: Instalando o Node.js]

	https://nodejs.org/download/release/v14.17.2/
	• Fazer download do .msi
	• npm install -g node@14.17.2
	• node --version
	• npm install -g npm@7.19.1
	• npm -v

-----------------------------------------------------
	
	[04 - Preparando o ambiente: Instalando o Expo]

	• npm install --global expo-cli@4.7.2
	• Instalar o app Expo no celular
	(Melhor forma de instalar: yarn global add expo-cli)

-----------------------------------------------------

	[05 - Criação da aplicação]

	• expo init orgs-cesta
	Choose blank

-----------------------------------------------------

	[06 - Rodando a aplicação]

	• npm start OU expo start

-----------------------------------------------------

	[07 - React Native vs Expo]

	Utilizando o Expo não precisamos instalar o ambiente Java com Android Studio ou Xcode, pois ele é enviado diretamente ao aplicativo do Expo instalado no celular que já inclui os códigos nativos necessários.

	Os aplicativos criados com o Expo em geral ocupam um pouco mais de espaço no celular do que aplicativos criados da forma tradicional em React Native, pois o expo já mantém todos os recursos necessários em caso de atualizações OTA.

-----------------------------------------------------

	[08 - Faça como eu fiz: Um projeto com Expo]

-----------------------------------------------------

	[09 - Para saber mais: Limitações do Expo]

	Lista de limitações do Expo: https://docs.expo.dev/introduction/why-not-expo/
	(Sempre se atentar a isso ao criar um project React-Native com Expo!!!)

-----------------------------------------------------

	[10 - O que aprendemos?]

	• Preparar o ambiente
	• Diferenças entre React Native CLI e Expo CLI
	• Criar um aplicativo Expo do Zero
	• Função live reload

-----------------------------------------------------

[2. Componentes e estilos]

	[01 - Projeto da aula anterior]

-----------------------------------------------------

	[02 - Componente e função]

-----------------------------------------------------

	[03 - Para saber mais: Componente de classe]

	Também é possível criar componentes com base em classes.
	Ainda hoje, é possível utilizar essa forma de criação de componentes. Porém, ela é bem menos usada, pois impossibilita a utilização de algumas funcionalidades recentes do React Native.

-----------------------------------------------------

	[04 - Preparando o ambiente: Download das imagens]

	https://github.com/alura-cursos/react-native-comecando-do-zero/blob/main/assets.zip

-----------------------------------------------------

	[05 - Imagem e estilos]

	<StatusBar />   --> O conteúdo fica abaixo da StatusBar preta
    <SafeAreaView>  --> No iOS, a barra de cima e barra virtual de baixo vão ser evitadas pelo conteúdo do aplicativo. Criando uma margin por fora.

	<Image source={} style={} />                   --> Inserindo Imagem
	const estilos = StyleSheet.create              --> Criação de estilos de um componente
	
	const width = Dimensions.get('screen').width;  --> Pega a largura do celular utilizado
	height: 578 / 768 * width,                     --> altura da imagem / largura da imagem * largura do celular = A altura da imagem irá se adequar de acordo com a largura da tela do celular.

-----------------------------------------------------

	[06 - Detalhes da cesta]

	flexDirection: "row"             --> Deixa o conteúdo em linha
	flexDirection: "column" (Padrão) --> Deixa o conteúdo em coluna

-----------------------------------------------------

	[07 - Fonte externa]

	Instalando a font Montserrat do Google Fonts pelo Expo
	• expo install expo-font @expo-google-fonts/montserrat

-----------------------------------------------------

	[08 - Componentes]

	Assim podemos criar um componente em forma de função. Precisamos importar o React, mesmo que não usamos, para que possamos adicionar as TAGs. Então apenas exportar uma função retornando os componentes, também importados, como se fosse um XML.

	Podemos retornar apenas o Text sem nenhuma View, mas precisamos nos atentar que textos sempre precisam estar entre TAGs Text!

-----------------------------------------------------

	[09 - Estilos]

	Podemos criar estilos no mesmo arquivo dos componentes sem nenhum problema, é até recomendado que façamos isso para que os estilos não possam ser reutilizados por outro componente e criem problemas ao fazer alterações.

-----------------------------------------------------

	[10 - Faça como eu fiz]

-----------------------------------------------------

	[11 - O que aprendemos?]

	• Utilizar componentes
	• Criar componentes
	• Estilizar componentes
	• Fonte externa

-----------------------------------------------------

[3. Refatorando]

	[01 - Projeto da aula anterior]

-----------------------------------------------------

	[02 - Componente de texto]

	style?.fontWeight === 'bold' --> Se existir o style ele faz a comparação, se não existir ele ignora a sentença

-----------------------------------------------------

	[03 - Cesta componentizada]

-----------------------------------------------------

	[04 - Textos generalizados]

	<Cesta {...mock} /> É IGUAL A
	<Cesta topo={mock.topo} detalhes={mock.detalhes} />	

-----------------------------------------------------

	[05 - Para saber mais: Mocks]

	Os mocks na programação geralmente são utilizados em testes automatizados como forma de substituir as funções originais para que os dados reais não sejam afetados pelos testes.

-----------------------------------------------------

	[06 - AppLoading e revisão]

	• Splash Screen
	$ expo install expo-app-loading
	<AppLoading />

-----------------------------------------------------

	[07 - Parâmetros]

	Para capturar o texto (ou mesmo outros componentes) que passamos dentro da chamada do componente, como “filhos” do componente, usamos a propriedade children (que quer dizer “filhos” em inglês).

	Quando desconstruímos o objeto ({...objeto}) removemos a camada exterior dele, passando o texto como parâmetro do componente, que equivale a: <MeuComponente texto={objeto.texto} />. Dessa forma, acessar o texto como parâmetro dentro do componente vai funcionar.

-----------------------------------------------------

	[09 - Faça como eu fiz]

-----------------------------------------------------	

	[10 - O que aprendemos?]
	
	• Reutilizar componentes
	• Usar parâmetros
	• Desconstruir objetos
	• Estender o tempo da splash screen

-----------------------------------------------------

[3. Botão e lista]

	[01 - Projeto da aula anterior]

-----------------------------------------------------

	[02 - Preparando o ambiente: Lista de itens]

-----------------------------------------------------

	[03 - Botão de compra]

	Button --> Botão simples (no Android aparece como padrão Android, no iOS aparece como padrão iOS)
	TouchableOpacity --> Clickável que tem opacidade ao clicar
	TouchableWithoutFeedback --> Clickável sem efeito CSS
	reactnative.dev --> documentação online
	
-----------------------------------------------------

	[04 - Reaproveitando o botão]

	A proposta deste desafio é que você isole o botão em um componente dentro da pasta src/componentes, e, assim, esse botão poderá ser reutilizado, seguindo os conceitos que utilizamos.

	-- A realizar.